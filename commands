ETCD
----


ETCD - Commands (Optional)
(Optional) Additional information about ETCDCTL Utility

ETCDCTL is the CLI tool used to interact with ETCD.

ETCDCTL can interact with ETCD Server using 2 API versions - Version 2 and Version 3.  By default its set to use Version 2. Each version has different sets of commands.

For example ETCDCTL version 2 supports the following commands:

etcdctl backup
etcdctl cluster-health
etcdctl mk
etcdctl mkdir
etcdctl set


Whereas the commands are different in version 3

etcdctl snapshot save
etcdctl endpoint health
etcdctl get
etcdctl put

To set the right version of API set the environment variable ETCDCTL_API command

export ETCDCTL_API=3



When API version is not set, it is assumed to be set to version 2. And version 3 commands listed above don't work. When API version is set to version 3, version 2 commands listed above don't work.



Apart from that, you must also specify path to certificate files so that ETCDCTL can authenticate to the ETCD API Server. The certificate files are available in the etcd-master at the following path. We discuss more about certificates in the security section of this course. So don't worry if this looks complex:

--cacert /etc/kubernetes/pki/etcd/ca.crt
--cert /etc/kubernetes/pki/etcd/server.crt
--key /etc/kubernetes/pki/etcd/server.key


command:

kubectl exec etcd-master -n kube-system -- sh -c "ETCDCTL_API=3 etcdctl get / --prefix --keys-only --limit=10 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key"
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


namespace
---------
kubectl create namespace dev
            or
you can create a namespace-definition.yml file

kube config set-context $(kubectl config current-context) --namespace=dev   # to change context

kubectl get ns --no-header | wc -l                                      # to get total namespaces
kubectl -n nameof-namespace get pods --no-headers | wc -l               # to get the total number of pods in a particular namespace
----------------------------------------------------------------------------------------------------------------------------------------


Scheduling
----------

1. Labels & Selectors
----------------------
kubectl get pods --show-labels
kubectl get pods --selector app=App1                            # getting the pods with specefic labels. here app=app1
kubectl get pods -l env=dev,bu=finance,tier=frontend            # getting the pods with specefic labels. here env=dev,bu=finance,tier=frontend



2. Taints and Toleration
-------------------------

kubectl taint nodes node-name key=value:taint-effect

taint-effect -> what happens to the pods that do not tolerate this taint ?
------------

3 types of taint effect:
------------------------
1. NoSchedule -> the pods will not be scheduled on the node
2. PreferNoSchedule -> the system will try to avoid placing the pod on the node but that is not guaranteed
3. NoExecute -> new pods will not be scheduled on the node and the existing pods on the node if any will be evicted

ex:
kubectl taint nodes node1 app=blue:NoSchedule           # appplying taint on a node
kubectl describe node kubemaster | grep Taint           # checking taint on node

kubectl explain pod --recursive | less                  # to lookup all the options available -> here for the toleration
                or
kubectl explain pod --recursive | grep -A5 tolerations  # print 5 lines below the keyword tolerations

kubectl taint node nodename taintvalue-
--------------------------------------------------------------------------------------------------------------------------


Node Selectors
--------------

Label Nodes
-----------

kubectl label nodes <node-name> <label-key>=<label-value>
kubectl label nodes node-1 size=Large

Node Affinity
-------------

DaemonSet
---------

kubectl create -f daemon-set-definition.yaml

----------------------------------------------------



Config Map
----------

kubectl create configmap <config-name> --from-literal=<key>=<value> --from-literal=<key>=<value>            # to create configmap passing the configurations from command line
kubectl create configmap <config-name> --from-file=<path-to-file>                                           # read configuration from a file and create configmap
kubectl create -f config-map.yaml                                                                           # to create configmaps from definition files


kubectl get configmaps             # to view configmaps
kubectl describe configmaps        # to describe configmaps
-----------------------------------------------------------------------------


Secrets
-------

kubectl create secret generic <secret-name> --from-literal=<key>=<value> --from-literal=<key>=<value>            # to create secret passing the configurations from command line
kubectl create secret generic <secret-name> --from-file=<path-to-file>                                           # read configuration from a file and create secret
kubectl create -f secret.yaml                                                                                    # to create secret from definition files


kubectl get secrets             # to view secrets values hidden
kubectl describe secrets        # to describe secrets

kubectl get secret <secret-name> -o yaml

----------------------------------------------------------------------------------

OS Upgrades
-----------

kubectl drain node-name
kubectl uncordon node-name     # mkes schedulable
kubectl cordon node-name       # makes unschedulable
------------------------------------------------------------------------------------------------

Cluster Upgrade
---------------

kubectl upgrade plan
kubectl upgrade apply
kubectl get nodes



1. upgrade master
------------------

# first upgrade kubeadm:
apt-get upgrade -y kubeadm=1.12.0-00

# then upgrade the cluster
kubeadm upgrade apply v1.12.0

# then upgrade the kubelet
apt-get upgrade -y kubelet=1.12.0-00

# restart kubelet service
systemctl restart kubelet

*********************************************

2. uppgrade workers
-------------------

# upgrade workers one by one
kubectl drain node-1

# upgrade kubeadm:
apt-get upgrade -y kubeadm=1.12.0-00

# then upgrade the kubelet
apt-get upgrade -y kubelet=1.12.0-00

#
kubeadm upgrade node config --kubelet-version v1.12.0

# restart kubelet service
systemctl restart kubelet

# make the node schedulable back again
kubectl uncordon node-1

****************************************************


Backup and Restore config
--------------------------

kubectl get all --all-namespaces -o yaml > all-deploy-services.yaml


etcd
-----

ETCDCTL_API=3 etcdctl snapshot save snapshot.db
ETCDCTL_API=3 etcdctl snapshot status snapshot.db

# to restore the backup
------------------------

service kube-apiserver stop
ETCDCTL_API=3 etcdctl snapshot restore snapshot.db --data-dir /var/lib/etcd-from-backup
systemctl daemon-reload
service etcd restart
service kube-apiserver start